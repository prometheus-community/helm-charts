name: Renovate Bump Chart Version

on:
  pull_request:
    branches:
      - main
    paths:
      - 'charts/**/*'

jobs:
  renovate-bump-chart-version:
    name: Renovate Bump Chart Version
    runs-on: ubuntu-latest
    if: github.actor == 'renovate[bot]'
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0

      # Using a GitHub App token, because GitHub Actions doesn't run on commits from github-actions bot
      # Used App:
      # https://github.com/organizations/prometheus-community/settings/apps/helm-charts-renovate-helper.
      # Ref: https://github.com/prometheus-community/helm-charts/issues/5213.
      - uses: actions/create-github-app-token@21cfef2b496dd8ef5b904c159339626a10ad380e # v1.11.6
        id: app-token
        with:
          app-id: 1179738
          private-key: ${{ secrets.APP_RENOVATE_HELPER_PRIVATE_KEY }}

      - uses: actions/setup-python@42375524e23c412d93fb67b49958b491fce71c38 # v5.4.0
        with:
          python-version: '3.13'

      - name: Set up chart-testing
        uses: helm/chart-testing-action@0d28d3144d3a25ea2cc349d6e59901c4ff469b3b # v2.7.0

      - name: Detect changed charts
        id: list-changed
        #language=bash
        run: |
          changed="$(ct list-changed --config .github/linters/ct.yaml)"
          if [[ -n "$changed" ]]; then
            echo "changed=true" >> "$GITHUB_OUTPUT"
            echo "changed_list=${changed//$'\n'/ }" >> "$GITHUB_OUTPUT"
          fi

      - name: Bump chart version
        if: steps.list-changed.outputs.changed == 'true'
        env:
          CHART: ${{ steps.list-changed.outputs.changed_list }}
        #language=bash
        run: |
          if [[ ! -d "${CHART}" ]]; then
            echo "${CHART} directory not found"
            exit 0
          fi

          CHART_VERSION=$(grep -e "^version:" "$CHART/Chart.yaml" | cut -d ":" -f 2 | tr -d '[:space:]' | tr -d '"')
          CHART_MAJOR_VERSION=$(printf '%s' "$CHART_VERSION" | cut -d "." -f 1)
          CHART_MINOR_VERSION=$(printf '%s' "$CHART_VERSION" | cut -d "." -f 2)
          CHART_MINOR_VERSION=$((CHART_MINOR_VERSION+1))
          CHART_NEW_VERSION="${CHART_MAJOR_VERSION}.${CHART_MINOR_VERSION}.0"
          sed -i "s/^version:.*/version: ${CHART_NEW_VERSION}/" "$CHART/Chart.yaml"

      - name: run renovate-post-upgrade-hook
        if: steps.list-changed.outputs.changed == 'true'
        env:
          CHART: ${{ steps.list-changed.outputs.changed_list }}
        #language=bash
        run: |
          if [[ -x "$CHART/hack/renovate-post-upgrade-hook.sh" ]]; then
            cd "$CHART"
            ./hack/renovate-post-upgrade-hook.sh
          fi

      - name: Commit changes
        if: steps.list-changed.outputs.changed == 'true'
        env:
          CHART: ${{ steps.list-changed.outputs.changed_list }}
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}
          GITHUB_HEAD_REF: ${{ github.head_ref }}
        #language=bash
        run: |
          # Define the target directory
          TARGET_DIR="$CHART"
          
          # Fetch deleted files in the target directory
          DELETED_FILES=$(git diff --diff-filter=D --name-only HEAD -- "$TARGET_DIR")
          
          # Fetch added/modified files in the target directory
          MODIFIED_FILES=$(git diff --diff-filter=ACM --name-only HEAD -- "$TARGET_DIR")
            
          # Initialize JSON structure
          FILE_CHANGES_JSON='{ "deletions": [], "additions": [] }'
          
          # Add deletions
          for file in $DELETED_FILES; do
            FILE_CHANGES_JSON=$(echo "$FILE_CHANGES_JSON" | jq --arg path "$file" '.deletions += [{"path": $path}]')
          done
          
          # Add additions (new or modified files)
          for file in $MODIFIED_FILES; do
            BASE64_CONTENT=$(base64 -w 0 <"$file")
            FILE_CHANGES_JSON=$(echo "$FILE_CHANGES_JSON" | jq --arg path "$file" --arg content "$BASE64_CONTENT" '.additions += [{"path": $path, "contents": $content}]')
          done
          
          # Construct final JSON using jq
          JSON_PAYLOAD=$(jq -n --arg repo "$GITHUB_REPOSITORY" \
                              --arg branch "$GITHUB_HEAD_REF" \
                              --arg message "post upgrade changes from renovate" \
                              --arg expectedOid "$GITHUB_SHA" \
                              --argjson fileChanges "$FILE_CHANGES_JSON" \
                              '{
                                query: "mutation ($input: CreateCommitOnBranchInput!) {
                                  createCommitOnBranch(input: $input) { 
                                    commit { 
                                      url 
                                    } 
                                  } 
                                }",
                                variables: {
                                  input: {
                                    branch: {
                                      repositoryNameWithOwner: $repo,
                                      branchName: $branch
                                    },
                                    message: { headline: $message },
                                    fileChanges: $fileChanges,
                                    expectedHeadOid: $expectedOid
                                  }
                                }
                              }')
          
          # Call GitHub API
          curl https://api.github.com/graphql -f \
               -sSf -H "Authorization: Bearer $GITHUB_TOKEN" \
               --data "$JSON_PAYLOAD"
