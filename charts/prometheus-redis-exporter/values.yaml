rbac:
  # Specifies whether RBAC resources should be created
  create: true
  # Specifies whether a PodSecurityPolicy should be created
  pspEnabled: true
serviceAccount:
  # Specifies whether a ServiceAccount should be created
  create: true
  # The name of the ServiceAccount to use.
  # If not set and create is true, a name is generated using the fullname template
  name:

replicaCount: 1
image:
  repository: oliver006/redis_exporter
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""
  pullSecrets: []
  # pullSecrets:
  #   - docker-secret 


command: []

extraArgs: {}

# global custom labels, applied to all resrouces
customLabels: {}

securityContext: {}

# Additional Environment variables
env: {}
# - name: REDIS_PASSWORD
#   valueFrom:
#     secretKeyRef:
#       key: redis-password
#       name: redis-config-0.0.2
service:
  type: ClusterIP
  port: 9121
  portName: redis-exporter
  annotations: {}
  labels: {}
    # prometheus.io/path: /metrics
    # prometheus.io/port: "9121"
    # prometheus.io/scrape: "true"
resources: {}

nodeSelector: {}

tolerations: []

affinity: {}

priorityClassName: ""

## Extra manifests to deploy as an array
extraManifests: []
  # - apiVersion: v1
  #   kind: ConfigMap
  #   metadata:
  #   labels:
  #     name: redis-exporter-extra
  #   data:
  #     extra-data: "value"

# If serviceMonitor.multipleTarget is enabled, this configuration is actually not used
redisAddress: redis://myredis:6379

# deployment additional annotations and labels
annotations: {}
labels: {}
#  prometheus.io/path: /metrics
#  prometheus.io/port: "9121"
#  prometheus.io/scrape: "true"

redisAddressConfig:
  # configure `REDIS_ADDR` from a configmap
  enabled: false
  # if `true` the `REDIS_ADDR` is sourced on a secret instead of a configmap
  isSecret: false
  # Use an existing configmap or secret will ignore redisAddress
  source:
    name: ""
    key: ""

redisTlsConfig:
  # Use TLS configuration
  enabled: false
  # Whether to to skip TLS verification
  skipTlsVerification: false
  # All secrets key about TLS config will be mounted into this path
  mountPath: /tls

  # REDIS_EXPORTER_TLS_CA_CERT_FILE will be set to /tls/tls-ca-cert.crt
  caCertFile:
    secret:
      name: ""
      key: ""
  # REDIS_EXPORTER_TLS_CLIENT_KEY_FILE  will be set to /tls/tls-client-key.key
  clientKeyFile:
    secret:
      name: ""
      key: ""
  # REDIS_EXPORTER_TLS_CLIENT_CERT_FILE will be set to /tls/tls-client-cert.crt
  clientCertFile:
    secret:
      name: ""
      key: ""
  # REDIS_EXPORTER_TLS_SERVER_KEY_FILE will be set to /tls/tls-server-key.key
  serverKeyFile:
    secret:
      name: ""
      key: ""
  # REDIS_EXPORTER_TLS_SERVER_CERT_FILE will be set to /tls/tls-server-cert.crt
  serverCertFile:
    secret:
      name: ""
      key: ""

serviceMonitor:
  # When set true then use a ServiceMonitor to configure scraping
  enabled: false
  multipleTarget: false
  targets: []
  # for every targets, url and name must be set,
  # an individual additionalRelabeling can be set for every target
  # - url: "redis://myredis:6379"
  #   name: "my-redis"
  # - url: "redis://my-redis-cluster:6379"
  #   name: "bar"
  #   additionalRelabeling:
  #   - sourceLabels: [type]
  #     targetLabel: type
  #     replacement: cluster
  #   additionalMetricsRelabels:
  #     type: cluster
  additionalMetricsRelabels: {}
  additionalRelabeling: []

  # Set the namespace the ServiceMonitor should be deployed
  # namespace: monitoring
  # Set how frequently Prometheus should scrape
  # interval: 30s
  # Set path to redis-exporter telemtery-path
  # Please set telemetryPath to /scrape if you are using multiple targets
  # telemetryPath: /metrics
  # Set labels for the ServiceMonitor, use this to define your scrape label for Prometheus Operator
  # labels:
  # Set timeout for scrape
  # timeout: 10s
  # Set relabel_configs as per https://prometheus.io/docs/prometheus/latest/configuration/configuration/#relabel_config
  # relabelings: []
  # Set of labels to transfer on the Kubernetes Service onto the target.
  # targetLabels: []
  # metricRelabelings: []
  # Set tls options
  # scheme: ""
  # tlsConfig: {}

## Custom PrometheusRules to be defined
## The value is evaluated as a template, so, for example, the value can depend on .Release or .Chart
## ref: https://github.com/coreos/prometheus-operator#customresourcedefinitions
prometheusRule:
  enabled: false
  additionalLabels: {}
  namespace: ""
  rules: []
    ## These are just examples rules, please adapt them to your needs.
    ## Make sure to constraint the rules to the current service.
    #  - alert: RedisDown
    #    expr: redis_up{service="{{ template "prometheus-redis-exporter.fullname" . }}"} == 0
    #    for: 2m
    #    labels:
    #      severity: error
    #    annotations:
    #      summary: Redis instance {{ "{{ $labels.instance }}" }} down
    #      description: Redis instance {{ "{{ $labels.instance }}" }} is down.
    #  - alert: RedisMemoryHigh
    #    expr: >
    #       redis_memory_used_bytes{service="{{ template "prometheus-redis-exporter.fullname" . }}"} * 100
    #       /
    #       redis_memory_max_bytes{service="{{ template "prometheus-redis-exporter.fullname" . }}"}
    #       > 90 <= 100
    #    for: 2m
    #    labels:
    #      severity: error
    #    annotations:
    #      summary: Redis instance {{ "{{ $labels.instance }}" }} is using too much memory
    #      description: |
    #         Redis instance {{ "{{ $labels.instance }}" }} is using {{ "{{ $value }}" }}% of its available memory.
    #  - alert: RedisKeyEviction
    #    expr: |
    #      increase(redis_evicted_keys_total{service="{{ template "prometheus-redis-exporter.fullname" . }}"}[5m]) > 0
    #    for: 1s
    #    labels:
    #      severity: error
    #    annotations:
    #      summary: Redis instance {{ "{{ $labels.instance }}" }} has evicted keys
    #      description: |
    #        Redis instance {{ "{{ $labels.instance }}" }} has evicted {{ "{{ $value }}" }} keys in the last 5 minutes.

# Used to mount a LUA-Script via config map and use it for metrics-collection
# script:
#   configmap: prometheus-redis-exporter-script
#   keyname: script

auth:
  # Use password authentication
  enabled: false
  # Use existing secret (ignores redisPassword)
  secret:
    name: ""
    key: ""
  # Redis password (when not stored in a secret)
  redisPassword: ""
  # Redis user (version 6.X and above)
  redisUser: ""
  # Redis password file (e.g., https://github.com/oliver006/redis_exporter/blob/v1.27.0/contrib/sample-pwd-file.json)
  # secret (useful for multiple redis instances with different passwords). If secret name and key are set
  # this will ignore the single password auth.secret.*
  redisPasswordFile:
    # The secret key will be mounted into this path as a file
    # e.g., if secret key is pass.json, the env variable
    # REDIS_PASSWORD_FILE will be set to /auth/pass.json
    mountPath: /auth
    secret:
      name: ""
      key: ""

podSecurityContext: {}
# Example podsecurity policy
# More information available at:
# https://kubernetes.io/docs/concepts/security/pod-security-standards/
# podSecurityContext:
#   seccompProfile:
#     type: RuntimeDefault
#   runAsNonRoot: true
#   runAsUser: 10001
#   runAsGroup: 10001
