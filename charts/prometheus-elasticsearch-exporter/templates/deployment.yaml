apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "elasticsearch-exporter.fullname" . }}
  labels:
    {{- include "elasticsearch-exporter.labels" . | nindent 4 }}
  {{- with .Values.deployment.labels }}
    {{- toYaml . | nindent 4 }}
  {{- end }}
  {{- with .Values.deployment.annotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
spec:
  replicas: {{ .Values.replicaCount }}
  revisionHistoryLimit: {{ .Values.revisionHistoryLimit }}
  selector:
    matchLabels:
      {{- include "elasticsearch-exporter.selectorLabels" . | nindent 6 }}
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      labels:
        {{- include "elasticsearch-exporter.labels" . | nindent 8 }}
        {{- with .Values.commonLabels }}
          {{- toYaml . | nindent 8 }}
        {{- end }}
      {{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    spec:
      serviceAccountName: {{ template "elasticsearch-exporter.serviceAccountName" . }}
{{- if .Values.priorityClassName }}
      priorityClassName: "{{ .Values.priorityClassName }}"
{{- end }}
      {{- if or .Values.global.imagePullSecrets .Values.image.pullSecret }}
      imagePullSecrets:
      {{- include "elasticsearch-exporter.imagePullSecrets" . | indent 8 }}
      {{- end }}
      restartPolicy: {{ .Values.restartPolicy }}
      {{- with .Values.podSecurityContext }}
      securityContext:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.dnsConfig }}
      dnsConfig:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
        - name: exporter
          env:
            {{- range $key, $value := .Values.extraEnvSecrets }}
            - name: {{ $key }}
              valueFrom:
                secretKeyRef:
                  name: {{ required "Must specify secret!" (tpl $value.secret $) }}
                  key: {{ required "Must specify key!" $value.key }}
            {{- end }}
            {{- range $key, $value := .Values.env }}
            - name: {{ $key }}
              value: "{{ $value }}"
            {{- end }}
          {{- if .Values.envFromSecret }}
          envFrom:
          - secretRef:
              name: {{ .Values.envFromSecret }}
          {{- end }}
          image: "{{- include "elasticsearch-exporter.image.repository" . }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command: ["elasticsearch_exporter",
                    {{- with .Values.log.format }}
                    "--log.format={{ . }}",
                    {{- end }}
                    {{- with .Values.log.level }}
                    "--log.level={{ . }}",
                    {{- end }}
                    {{- if .Values.es.uri }}
                    "--es.uri={{ tpl .Values.es.uri . }}",
                    {{- end }}
                    {{- if .Values.es.all }}
                    "--es.all",
                    {{- end }}
                    {{- if .Values.es.indices }}
                    "--es.indices",
                    {{- end }}
                    {{- if .Values.es.indices_settings }}
                    "--es.indices_settings",
                    {{- end }}
                    {{- if .Values.es.indices_mappings }}
                    "--es.indices_mappings",
                    {{- end }}
                    {{- if .Values.es.aliases }}
                    "--es.aliases",
                    {{- end }}
                    {{- if .Values.es.shards }}
                    "--es.shards",
                    {{- end }}
                    {{- if .Values.es.snapshots }}
                    "--collector.snapshots",
                    {{- end }}
                    {{- if .Values.es.cluster_settings }}
                    "--collector.clustersettings",
                    {{- end }}
                    {{- if .Values.es.slm }}
                    "--es.slm",
                    {{- end }}
                    {{- if .Values.es.data_stream }}
                    "--es.data_stream",
                    {{- end }}
                    {{- if .Values.es.ilm }}
                    "--es.ilm",
                    {{- end }}
                    "--es.timeout={{ .Values.es.timeout }}",
                    {{- if .Values.es.sslSkipVerify }}
                    "--es.ssl-skip-verify",
                    {{- end }}
                    {{- if .Values.es.ssl.enabled }}
                    "--es.ca={{.Values.es.ssl.ca.path }}",
                    {{- if .Values.es.ssl.client.enabled }}
                    "--es.client-cert={{ .Values.es.ssl.client.pemPath }}",
                    "--es.client-private-key={{ .Values.es.ssl.client.keyPath }}",
                    {{- end }}
                    {{- end }}
                    {{- range .Values.extraArgs }}
                    {{ . | quote }},
                    {{- end }}
                    "--web.listen-address=:{{ .Values.service.httpPort }}",
                    "--web.telemetry-path={{ .Values.web.path }}"]
          {{- with .Values.securityContext }}
          securityContext:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with .Values.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          ports:
            - containerPort: {{ .Values.service.httpPort }}
              name: {{ .Values.service.metricsPort.name }}
          livenessProbe:
            httpGet:
              path: /healthz
              port: {{ .Values.service.metricsPort.name }}
            initialDelaySeconds: 5
            timeoutSeconds: 5
            periodSeconds: 5
          readinessProbe:
            httpGet:
              path: /healthz
              port: {{ .Values.service.metricsPort.name }}
            initialDelaySeconds: 1
            timeoutSeconds: 5
            periodSeconds: 5
          lifecycle:
            preStop:
              exec:
                command: ["/bin/sleep", "20"]
          volumeMounts:
            {{- if and .Values.es.ssl.enabled (eq .Values.es.ssl.useExistingSecrets false) }}
            - mountPath: /ssl
              name: ssl
            {{- end }}
            {{- range .Values.secretMounts }}
            - name: {{ .name }}
              mountPath: {{ .path }}
              {{- if .subPath }}
              subPath: {{ .subPath }}
              {{- end }}
            {{- end }}
            {{- with .Values.extraVolumeMounts }}
            {{- toYaml . | nindent 12 }}
            {{- end }}
      {{- with .Values.initContainers }}
      initContainers:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- tpl (toYaml .) $ | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- tpl (toYaml .) $ | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.topologySpreadConstraints }}
      topologySpreadConstraints:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:
        {{- if and .Values.es.ssl.enabled (eq .Values.es.ssl.useExistingSecrets false) }}
        - name: ssl
          secret:
            secretName: {{ template "elasticsearch-exporter.fullname" . }}-cert
        {{- end }}
        {{- range .Values.secretMounts }}
        - name: {{ .name }}
          secret:
            secretName: {{ .secretName }}
        {{- end }}
        {{- with .Values.extraVolumes }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
