alertmanager:
  ingress:
    enabled: true
    hosts:
      - "*.example.com"
  route:
    main:
      enabled: true
      hostnames:
        - "*.example.com"
      filters:
        - type: RequestHeaderModifier
          requestHeaderModifier:
            set:
              - name: my-header-name
                value: my-new-header-value
      additionalRules:
        - hostnames:
            - "foo.example.com"
          filters:
            - type: RequestHeaderModifier
              requestHeaderModifier:
                set:
                  - name: my-header-name
                    value: my-new-header-value
          matches:
            - path:
                type: PathPrefix
                value: /foo/


prometheus:
  ingress:
    enabled: true
    hosts:
      - "*.example.com"
  route:
    main:
      enabled: true
      hostnames:
        - "*.example.com"
      filters:
        - type: RequestHeaderModifier
          requestHeaderModifier:
            set:
              - name: my-header-name
                value: my-new-header-value
      additionalRules:
        - hostnames:
            - "foo.example.com"
          filters:
            - type: RequestHeaderModifier
              requestHeaderModifier:
                set:
                  - name: my-header-name
                    value: my-new-header-value
          matches:
            - path:
                type: PathPrefix
                value: /foo/

thanosRuler:
  ingress:
    enabled: true
    hosts:
      - "*.example.com"
  route:
    main:
      enabled: true
      hostnames:
        - "*.example.com"
      filters:
        - type: RequestHeaderModifier
          requestHeaderModifier:
            set:
              - name: my-header-name
                value: my-new-header-value
      additionalRules:
        - hostnames:
            - "foo.example.com"
          filters:
            - type: RequestHeaderModifier
              requestHeaderModifier:
                set:
                  - name: my-header-name
                    value: my-new-header-value
          matches:
            - path:
                type: PathPrefix
                value: /foo/

extraObjects:
  configmap:
    apiVersion: v1
    kind: ConfigMap
    metadata:
      name: test-cm
    data:
      plaintext: foobar
      templated: '{{ print "foobar" | upper }}'
  secret: |
    apiVersion: v1
    kind: Secret
    type: Opaque
    metadata:
      name: test-secret
    data:
      plaintext: Zm9vYmFy
      templated: '{{ print "foobar" | upper | b64enc }}'
